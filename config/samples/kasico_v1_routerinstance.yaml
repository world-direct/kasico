apiVersion: kasico.world-direct.at/v1
kind: RouterInstance
metadata:
  name: routerinstance-sample
spec:
  ingressClassName: default
  kamailioImage: kamailio/kamailio:5.4.9-jessie 
  routerService:
    # https://github.com/kubernetes/kubernetes/pull/94028
    tcpPort: 0
    udpPort: 5060  
    annotations:
      metallb.universe.tf/address-pool: kamailio
  kamailioConfigTemplates:
    kamailio.cfg: |
      #!KAMAILIO
      #
      # Kamailio SIP Server v5.2 - default configuration script
      #     - web: https://www.kamailio.org
      #     - git: https://github.com/kamailio/kamailio
      #
      # Direct your questions about this file to: <sr-users@lists.kamailio.org>
      #
      # Refer to the Core CookBook at https://www.kamailio.org/wiki/
      # for an explanation of possible statements, functions and parameters.
      #

      ####### Defined Values #########

      #!define MULTIDOMAIN 0

      # - flags
      #   FLT_ - per transaction (message) flags
      #	FLB_ - per branch flags
      #!define FLT_ACC 1
      #!define FLT_ACCMISSED 2
      #!define FLT_ACCFAILED 3
      #!define FLT_NATS 5

      #!define FLB_NATB 6
      #!define FLB_NATSIPPING 7

      ####### Global Parameters #########

      ### LOG Levels: 3=DBG, 2=INFO, 1=NOTICE, 0=WARN, -1=ERR
      debug=2

      log_stderror=yes

      # memdbg=5
      # memlog=5

      # log_facility=LOG_LOCAL0
      log_prefix="{$mt $hdr(CSeq) $ci} "

      /* number of SIP routing processes */
      children=2

      /* uncomment the next line to disable TCP (default on) */
      # disable_tcp=yes

      /* uncomment the next line to disable the auto discovery of local aliases
      * based on reverse DNS on IPs (default on) */
      # auto_aliases=no

      /* add local domain aliases */
      # alias="sip.mydomain.com"

      /* listen addresses */
      listen=udp:0.0.0.0:{{.UDPPort}}


      ####### Custom Parameters #########

      /* These parameters can be modified runtime via RPC interface
      * - see the documentation of 'cfg_rpc' module.
      *
      * Format: group.id = value 'desc' description
      * Access: $sel(cfg_get.group.id) or @cfg_get.group.id */

      ####### Modules Section ########
      loadmodule "app_python3.so"
      loadmodule "jsonrpcs.so"
      loadmodule "ctl.so"
      loadmodule "pv.so"          # Pseudo variables: Needed to use variables in config file      # transaction module
      loadmodule "sl.so"          # stateless replies
      loadmodule "siputils.so"    # ??
      loadmodule "xlog.so"        # logging
      loadmodule "avp.so"         # attach Attribute Value Pairs to SIP messages
      loadmodule "rr.so"          # record route functionality
      loadmodule "textops.so"     # for the is_method function
      loadmodule "maxfwd.so"
      loadmodule "sanity.so"
      loadmodule "debugger.so"
      loadmodule "corex.so"

      # ----------------- setting module-specific parameters ---------------

      # ----- jsonrpcs params -----
      modparam("jsonrpcs", "pretty_format", 1)


      # enable trace
      modparam("debugger", "cfgtrace", 1)
      # load python file
      modparam("app_python3", "load", "/etc/kamailio/main.py")

      cfgengine "python"
    main.py: |
      # Kamailio - equivalent of routing blocks in Python
      ##
      # KSR - the new dynamic object exporting Kamailio functions
      # Router - the old object exporting Kamailio functions
      ##

      # Relevant remarks:
      # * return code -255 is used to propagate the 'exit' behaviour to the
      # parent route block function. The alternative is to use the native
      # Python function sys.exit() (or exit()) -- it throws an exception that
      # is caught by Kamailio and previents the stop of the interpreter.


      import KSR as KSR

      FLT_ACC = 1
      FLT_ACCMISSED = 2
      FLT_ACCFAILED = 3
      FLT_NATS = 5
      FLB_NATB = 6
      FLB_NATSIPPING = 7

      config_data = {
          'advertiseAddress': '{{.AdvertiseAddress}}:{{.UDPPort}}',
          'kubernetesSourcePrefix': '10.43',        
          'rules': [
              {{range .Rules}}
              {'domain': '{{.Domain}}', 'owner': '{{.Owner}}', 'service': '{{.Backend}}', 'headnumber': '{{.Headnumber}}'},
              {{end}}
          ]
      }

      # global function to instantiate a kamailio class object
      # -- executed when kamailio app_python module is initialized


      def mod_init():
          KSR.info("===== from Python mod init\n")
          # dumpObj(KSR)
          return kamailio()


      # -- {start defining kamailio class}
      class kamailio:
          def __init__(self):
              KSR.info('===== kamailio.__init__\n')

          # executed when kamailio child processes are initialized

          def child_init(self, rank):
              # KSR.info('===== kamailio.child_init(%d)\n' % rank)
              return 0

          # SIP request routing
          # -- equivalent of request_route{}
          def ksr_request_route(self, msg):
              KSR.info("===== method [%s] r-uri [%s] ======\n" % (KSR.pv.get("$rm"), KSR.pv.get("$ru")))

              # do some initial request checks against malformed requests
              if self.ksr_route_reqinit() == -255:
                  return -1

              if self.route_request() == -255:
                  return -1
              
              KSR.forward()

              KSR.info("===== End handling request [" + KSR.pv.get("$rm") + "] ====== \n")

              return 1

          def route_request(self):
              KSR.rr.record_route_advertised_address(config_data["advertiseAddress"])

              KSR.info("[ROUTE_REQUEST] Source ip address: "+ KSR.pv.get("$si") + "\n")
              
              # check if source ip from k8s net, so its an outbound call
              if KSR.pv.get("$si").startswith(config_data['kubernetesSourcePrefix']):
                  return self.ksr_route_outbound()

              # else the routing to the correct service has to be done
              return self.ksr_route_inbound()


          def ksr_route_outbound(self): 
              # outbound call
              if KSR.rr.loose_route() < 1:
                  KSR.info("[ROUTE_OUTBOUND] Failed loose routing for method: "+ KSR.pv.get("$rm") + " and source ip:" +KSR.pv.get("$si") + ".\n")
                  KSR.sl.send_reply(430,"Flow failed.")
                  return -255

              # successful loose route, so return 1 to do the forward() in main
              KSR.info("[ROUTE_OUTBOUND] Loose routing successful for outbound call.\n")

              # sets the address in the via header for responses to find the location
              KSR.set_advertised_address(config_data["advertiseAddress"])
              return 1
          
          def ksr_route_inbound(self):
              # do loose route, in either case search if theres a matching rule
              if KSR.hdr.is_present("Route") > 0:
                  KSR.info("[ROUTE_INBOUND] Try loose routing for inbound call. \n")
                  if KSR.rr.loose_route() < 0:
                      KSR.info("[ROUTE_REQUEST] Loose routing for inbound call failed. \n")


              domain = str(KSR.pv.get("$rd") or '')
              mainnumber = str(KSR.pv.get("$rU") or '')
              KSR.info("[ROUTE_INBOUND] Try to find correct service for request:<" + domain + "> or number:<" + mainnumber + ">.\n")

              # search if the rDomain or user contain either correct domain or number 
              for rule in config_data["rules"]:
                  if domain == rule["domain"] or mainnumber.startswith(rule["headnumber"]):
                      KSR.info("[ROUTE_INBOUND] Routing request to " + rule["service"] + "\n")
                      KSR.pv.sets("$rd", rule["service"])
                      return 1

              # is this correct or is a special handling needed for other request URIs
              KSR.sl.send_reply(404, "Not found")
              return -255

          def ksr_route_reqinit(self):
              if KSR.corex.has_user_agent() > 0:
                  ua = KSR.pv.gete("$ua")
                  if (ua.find("friendly") != -1 or ua.find("scanner") != -1
                          or ua.find("sipcli") != -1 or ua.find("sipvicious") != -1):
                      KSR.sl.sl_send_reply(200, "Processed")
                      return -255

              if KSR.maxfwd.process_maxfwd(10) < 0:
                  KSR.sl.sl_send_reply(483, "Too Many Hops")
                  return -255

              if KSR.sanity.sanity_check(17895, 7) < 0:
                  KSR.err("Malformed SIP message from "
                          + KSR.pv.get("$si") + ":" + str(KSR.pv.get("$sp")) + "\n")
                  return -255

          def ksr_reply_route(self, msg):
              return 1

          def ksr_on_reply_manage(self, msg):
              return 1

          def ksr_onsend_route(self, msg):
              return 1

          def ksr_branch_route_one(self, msg):
              return 1

          def ksr_onreply_route_one(self, msg):
              return 1

          def ksr_failure_route_one(self, msg):
              return 1

      # -- {end defining kamailio class}  
      