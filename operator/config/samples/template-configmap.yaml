apiVersion: v1
kind: ConfigMap
metadata:
  name: kamailio-templates
data:
  kamailio.cfg: |
    #!KAMAILIO
    #
    # Kamailio SIP Server v5.2 - default configuration script
    #     - web: https://www.kamailio.org
    #     - git: https://github.com/kamailio/kamailio
    #
    # Direct your questions about this file to: <sr-users@lists.kamailio.org>
    #
    # Refer to the Core CookBook at https://www.kamailio.org/wiki/
    # for an explanation of possible statements, functions and parameters.
    #

    ####### Defined Values #########

    #!define MULTIDOMAIN 0

    # - flags
    #   FLT_ - per transaction (message) flags
    #	FLB_ - per branch flags
    #!define FLT_ACC 1
    #!define FLT_ACCMISSED 2
    #!define FLT_ACCFAILED 3
    #!define FLT_NATS 5

    #!define FLB_NATB 6
    #!define FLB_NATSIPPING 7

    ####### Global Parameters #########

    ### LOG Levels: 3=DBG, 2=INFO, 1=NOTICE, 0=WARN, -1=ERR
    debug=2

    log_stderror=yes

    # memdbg=5
    # memlog=5

    # log_facility=LOG_LOCAL0
    log_prefix="{$mt $hdr(CSeq) $ci} "

    /* number of SIP routing processes */
    children=2

    /* uncomment the next line to disable TCP (default on) */
    # disable_tcp=yes

    /* uncomment the next line to disable the auto discovery of local aliases
    * based on reverse DNS on IPs (default on) */
    # auto_aliases=no

    /* add local domain aliases */
    # alias="sip.mydomain.com"

    /* listen addresses */
    listen=udp:0.0.0.0:{{.UDPPort}}


    ####### Custom Parameters #########

    /* These parameters can be modified runtime via RPC interface
    * - see the documentation of 'cfg_rpc' module.
    *
    * Format: group.id = value 'desc' description
    * Access: $sel(cfg_get.group.id) or @cfg_get.group.id */

    ####### Modules Section ########
    loadmodule "app_python3.so"
    loadmodule "jsonrpcs.so"
    loadmodule "ctl.so"
    loadmodule "db_mysql.so"
    loadmodule "pv.so"          # Pseudo variables: Needed to use variables in config file
    loadmodule "tm.so"          # transaction module
    loadmodule "sl.so"          # stateless replies
    loadmodule "siputils.so"    # ??
    loadmodule "xlog.so"        # logging
    loadmodule "avp.so"         # attach Attribute Value Pairs to SIP messages
    loadmodule "rr.so"          # record route functionality
    loadmodule "textops.so"     # for the is_method function
    loadmodule "maxfwd.so"
    loadmodule "sanity.so"
    loadmodule "debugger.so"
    loadmodule "corex.so"

    # ----------------- setting module-specific parameters ---------------

    # ----- jsonrpcs params -----
    modparam("jsonrpcs", "pretty_format", 1)


    # ----- tm params -----
    # auto-discard branches from previous serial forking leg
    modparam("tm", "failure_reply_mode", 3)
    # default retransmission timeout: 30sec
    modparam("tm", "fr_timer", 30000)
    # default invite retransmission timeout after 1xx: 120sec
    modparam("tm", "fr_inv_timer", 120000)


    # enable trace
    modparam("debugger", "cfgtrace", 1)
    # load python file
    modparam("app_python3", "load", "/etc/kamailio/test.py")

    cfgengine "python"  

  test.py: |
    ## Kamailio - equivalent of routing blocks in Python
    ##
    ## KSR - the new dynamic object exporting Kamailio functions
    ## Router - the old object exporting Kamailio functions
    ## test

    ## Relevant remarks:
    ##  * return code -255 is used to propagate the 'exit' behaviour to the
    ##  parent route block function. The alternative is to use the native
    ##  Python function sys.exit() (or exit()) -- it throws an exception that
    ##  is caught by Kamailio and previents the stop of the interpreter.


    import re
    import KSR as KSR

    FLT_ACC=1
    FLT_ACCMISSED=2
    FLT_ACCFAILED=3
    FLT_NATS=5
    FLB_NATB=6
    FLB_NATSIPPING=7

    # global function to instantiate a kamailio class object
    # -- executed when kamailio app_python module is initialized
    def mod_init():
        KSR.info("===== from Python mod init\n")
        # dumpObj(KSR)
        return kamailio()


    # -- {start defining kamailio class}
    class kamailio:
        def __init__(self):
            KSR.info('===== kamailio.__init__\n')


        # executed when kamailio child processes are initialized
        def child_init(self, rank):
            # KSR.info('===== kamailio.child_init(%d)\n' % rank)
            return 0


        # SIP request routing
        # -- equivalent of request_route{}
        def ksr_request_route(self, msg):
            # KSR.rr.record_route_advertised_address()

            # KSR.info("===== request - from kamailio python script\n")
            KSR.info("===== method [%s] r-uri [%s]\n" % (KSR.pv.get("$rm"),KSR.pv.get("$ru")))

            if self.ksr_route_reqinit(msg) == -255:
                return -1

            # logic to decide wether to use the domain or the main number (or other params) for the routing decision 
            mainnumber = ""
            if re.search(".*world-direct.at", KSR.pv.get("$rd")):
                KSR.info("The request domain is used:"+ KSR.pv.get("$rd") + "\n")
            else:
                # cut the extension from the number
                mainnumber = KSR.pv.get("$tU")[:-3]
                KSR.info("The to user without extension is used:" + mainnumber + "\n")


            # based on template language for each customer later 
            if "customera" in KSR.pv.get("$rd") or mainnumber == "<main number of customer a>":
                KSR.forward_uri("sip:customera;transport=udp")
                return 1
            elif "customerb" in KSR.pv.get("$rd") or mainnumber == "<main number of customer b>":
                KSR.forward_uri("sip:customerb;transport=udp")
                return 1
            else:
                KSR.sl.send_reply(404, "No destination found.")

            return 1

        
        def ksr_reply_route(self, msg):
            return 1
        

        def ksr_on_reply_manage(self, msg):
            return 1

        def ksr_route_reqinit(self, msg):
            if KSR.corex.has_user_agent() > 0:
                ua = KSR.pv.gete("$ua")
                if (ua.find("friendly")!=-1 or ua.find("scanner")!=-1
                        or ua.find("sipcli")!=-1 or ua.find("sipvicious")!=-1) :
                    KSR.sl.sl_send_reply(200, "Processed")
                    return -255

            if KSR.maxfwd.process_maxfwd(10) < 0 :
                KSR.sl.sl_send_reply(483,"Too Many Hops")
                return -255

            if KSR.sanity.sanity_check(17895, 7)<0 :
                KSR.err("Malformed SIP message from "
                        + KSR.pv.get("$si") + ":" + str(KSR.pv.get("$sp")) +"\n")
                return -255

        def ksr_onsend_route(self, msg):
            return 1

        def ksr_branch_route_one(self, msg):
            return 1

        def ksr_onreply_route_one(self, msg):
            return 1

        def ksr_failure_route_one(self, msg):
            return 1

    # -- {end defining kamailio class}
